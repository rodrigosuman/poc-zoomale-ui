import type { NextPage } from "next";
import Head from "next/head";
import { useMemo, useRef } from "react";
import {
  ReactZoomPanPinchRef,
  TransformComponent,
  TransformWrapper,
} from "react-zoom-pan-pinch";
import styles from "../styles/Home.module.css";
import { BaseData } from "../types";
import { BASE_FONT_SIZE, BASE_GAP, data, getRandomBackground } from "../utils";

const createNestedComponent = (
  level: number,
  data: BaseData,
  zoomToElement: (id: any, scale?: any) => void
) => {
  const {
    title,
    background = "#fff",
    nested,
    color = "#000",
    id,
    style,
  } = data;
  const gap = BASE_GAP / level;

  const hasNestedItems = nested?.length;

  const backgroundColor = () => {
    if (level === 1) return background;

    return hasNestedItems ? "#fff" : background;
  };

  return (
    <div
      id={id}
      onDoubleClick={(e) => {
        const _id = e.currentTarget.id;
        zoomToElement(_id);
        e.stopPropagation();
      }}
      style={{
        background: backgroundColor(),
        color,
        gap,
        height: "min-content",
        fontSize: BASE_FONT_SIZE / level,
        padding: 16 / level,
        borderRadius: 8 / level,
        borderStyle: "solid",
        borderColor:
          backgroundColor() !== "#fff" ? backgroundColor() : "#8b8b8b",
        borderWidth: 1,
        ...style,
      }}
    >
      <a href="#">Link</a>
      <div style={{ height: "min-content" }}>{title}</div>
      {nested?.length && (
        <div
          style={{
            gap,
            display: "flex",
            flexFlow: "row wrap",
            marginTop: 15 / level,
          }}
        >
          {nested?.map?.((d, i) =>
            createNestedComponent(
              level + 1,
              {
                ...d,
                background: getRandomBackground(),
              },
              zoomToElement
            )
          )}
        </div>
      )}
    </div>
  );
};

const Home: NextPage = () => {
  const baseData = useMemo(() => data, []);
  const transformWrapperRef = useRef<ReactZoomPanPinchRef>(null);
  return (
    <div className={styles.container}>
      <Head>
        <title>Zoomable view POC</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <TransformWrapper
        wheel={{
          step: 0.2,
        }}
        ref={transformWrapperRef}
        doubleClick={{
          disabled: true,
        }}
      >
        <TransformComponent
          contentStyle={{
            width: "100vw",
            minHeight: "100vh",
            background: "#004a8f",
          }}
          wrapperStyle={{
            height: "100%",
          }}
        >
          <div
            style={{
              display: "grid",
              gridTemplateColumns: "18% 1fr 18%",
              padding: 16,
              gap: 20,
              width: "100%",
            }}
          >
            <div style={{ background: "#111242", borderRadius: 8 }}></div>
            <div style={{ display: "grid", gap: 20 }}>
              {baseData.map((d, i) =>
                createNestedComponent(1, d, (id: string) => {
                  console.log({
                    id,
                    func: transformWrapperRef.current?.zoomToElement,
                  });

                  transformWrapperRef.current?.zoomToElement?.(id);
                })
              )}
            </div>
            <div style={{ background: "#111242", borderRadius: 8 }}></div>
          </div>
        </TransformComponent>
      </TransformWrapper>
    </div>
  );
};

export default Home;
